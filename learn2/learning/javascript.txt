//js introduction
//JavaScript Can Change HTML Content
document.getElementById("demo").innerHTML = "Hello JavaScript";

//JavaScript Can Change HTML Attribute Values
document.getElementById('img1').src='pic2.png';

//JavaScript Can Change HTML Styles
document.getElementById("demo").style.fontSize = "35px";

//JavaScript Can Hide HTML Elements
document.getElementById("demo").style.display = "none";

//JavaScript Can Show HTML Elements
document.getElementById('demo').style.display ='block';
--------------------------------------------------------------------------------------

//js where to
//The <script> Tag
<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script>

//JavaScript in <head> or <body>
//Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
//in head
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>

//in body
<body>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</body>

//External JavaScript
<script src="myScript.js"></script>

//External JavaScript Advantages
It makes HTML and JavaScript easier to read and maintain
Cached JavaScript files can speed up page loads

//External References
//With a full URL (a full web address)
<script src="https://www.w3schools.com/js/myScript.js"></script>

//With a file path (like /js/)
<script src="/js/myScript.js"></script>

//Without any path (no path)
<script src="myScript.js"></script>
----------------------------------------------------------------------------------

//JavaScript Output
//JavaScript Display Possibilities
//Using innerHTML
document.getElementById('demo').innerHTML = 'this is test';

//Using document.write()
//Using document.write() after an HTML document is loaded, will delete all existing HTML:
document.write('this is test');

//Using window.alert()
//You can skip the window keyword.
//keyword is optional:
window.alert('this is test');

//Using console.log()
//For debugging purposes, you can call the console.log() method in the browser to display data
 console.log('thi is test');

//JavaScript Print
//to print the content of the current window.
window.print()
----------------------------------------------------------------------------------

//JavaScript Statements
let x, y, z;    // Statement 1
x = 5;          // Statement 2

//JavaScript Programs
//A JavaScript program is a list of statements.

//JavaScript Keywords
//JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.
//like if, for, var, ...
-------------------------------------------------------------------------------------

//JavaScript Syntax
//JavaScript syntax is the set of rules, how JavaScript programs are constructed:
//example: how to create variables:
var x;

//JavaScript Values
//1- fixed values (Literals)//تحت اللفظی
//2- variable values (variables)

//JavaScript Literals
//1- numbers
10.50
//2- strings
"john"
'john'

//js variables
//variables are used to store data values.
//JavaScript uses the keywords var, let and const to declare variables.
let x;
x=6;

//JavaScript Operators
(5 + 6) * 10

//JavaScript Expressions
//An expression is a combination of values, variables, and operators, which computes to a value.
//The computation is called an evaluation.
//For example, 5 * 10 evaluates to 50:

//JavaScript Comments
//Code after double slashes // or between /* and */ is treated as a comment.

//JavaScript Identifiers / Names
//Identifiers are JavaScript names.
//Identifiers are used to name variables and keywords, and functions.
//Subsequent characters may be letters, digits, underscores, or dollar signs.
//Numbers are not allowed as the first character in names.
//This way JavaScript can easily distinguish identifiers from numbers.

//JavaScript is Case Sensitive
//All JavaScript identifiers are case sensitive. 
//The variables lastName and lastname, are two different variables

//JavaScript and Camel Case
//Historically, programmers have used different ways of joining multiple words into one variable name:
//1- Hyphens //خط فاصله
first-name
//Hyphens are not allowed in JavaScript. They are reserved for subtractions.
//2- Underscore
first_name
//3- Upper Camel Case (Pascal Case):
FirstName
//4- Lower Camel Case:
firstName

//JavaScript Character Set
//JavaScript uses the Unicode character set.
//Unicode covers (almost) all the characters, punctuations(علائم نگارشی), and symbols in the world.
----------------------------------------------------------------------------------------------

//JavaScript Variables
//Variables are containers for storing data (storing data values).
//4 Ways to Declare a JavaScript Variable:
//Using var
//Using let
//Using const
//Using nothing

//When to Use JavaScript var?
//The var keyword is used in all JavaScript code from 1995 to 2015.
//The let and const keywords were added to JavaScript in 2015.
//If you want your code to run in older browsers, you must use var.

//When to Use JavaScript const?
//If you want a general rule: always declare variables with const.
//These are constant values and cannot be changed.
//If you think the value of the variable can change, use let.
const price1 = 5;
const price2 = 6;
let total = price1 + price2;

//JavaScript Data Types
//JavaScript variables can hold numbers like 100 and text values like "John Doe"
//If you put a number in quotes, it will be treated as a text string.
const pi = 3.14;
let person = "John Doe";

//Declaring a JavaScript Variable
//Creating a variable in JavaScript is called "declaring" a variable.
var carName;
let carName;
//After the declaration, the variable has no value (technically it is undefined).
//To assign a value to the variable, use the equal sign:
carName = "Volvo";
//You can also assign a value to the variable when you declare it:
//let carName = "Volvo";

//It's a good programming practice to declare all variables at the beginning of a script.

//One Statement, Many Variables
//You can declare many variables in one statement.
//Start the statement with let and separate the variables by comma:
let person = "John Doe", carName = "Volvo", price = 200;
//A declaration can span(گستردگی) multiple lines:
let person = "John Doe",
carName = "Volvo",
price = 200;

//Value = undefined
//A variable declared without a value will have the value undefined
//he variable carName will have the value undefined
let carName;

//Re-Declaring JavaScript Variables
//If you re-declare a JavaScript variable declared with var, it will not lose its value.
//The variable carName will still have the value "Volvo" after the execution of these statements:
var carName = "Volvo";
var carName;
//You cannot re-declare a variable declared with let or const.
//This will not work:
let carName = "Volvo";
let carName;

//JavaScript Arithmetic
//As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:
let x = 5 + 2 + 3;
//You can also add strings, but strings will be concatenated(الحاق)
let x = "John" + " " + "Doe";
//If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.
let x = 2 + 3 + "5";

//JavaScript Dollar Sign $
//Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:
let $ = "Hello World";
let $$$ = 2;
let $myMoney = 5;
//Using the dollar sign is not very common in JavaScript, but professional programmers often use it as //an alias for the main function in a JavaScript library.
//In the JavaScript library jQuery, for instance, the main function $ is used to select HTML elements. In //jQuery $("p"); means "select all p elements".

//JavaScript Underscore (_)
//Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:
let _lastName = "Johnson";
let _x = 2;
let _100 = 5;
//Using the underscore is not very common in JavaScript, but a convention among professional programmers is to use it as an alias for "private (hidden)" variables.
-------------------------------------------------------------------------------------------------

//JavaScript Let
//The let keyword was introduced in ES6 (2015).
//Variables defined with let cannot be Redeclared.
//Variables defined with let must be Declared before use.
//Variables defined with let have Block Scope.

//Variables declared inside a { } block cannot be accessed from outside the block:
{
  let x = 2;
}
// x can NOT be used here
//Variables declared with the var keyword can NOT have block scope.
//Variables declared inside a { } block can be accessed from outside the block.
{
  var x = 2;
}
// x CAN be used here

//Redeclaring Variables
//using var
var x = 10;
// Here x is 10
{
var x = 2;
// Here x is 2
}
// Here x is 2
-----------------
//using let
let x = 10;
// Here x is 10
{
let x = 2;
// Here x is 2
}
// Here x is 10
----------
//Redeclaring a JavaScript variable with var is allowed anywhere in a program:
//With let, redeclaring a variable in the same block is NOT allowed:

//Let Hoisting
//Variables defined with var are hoisted to the top and can be initialized at any time.
//Meaning: You can use the variable before it is declared:
carName = "Volvo";
var carName;
//Variables defined with let are also hoisted to the top of the block, but not initialized.
//Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.
//Using a let variable before it is declared will result in a ReferenceError
//This code will not run.
carName = "Saab";
let carName = "Volvo";
------------------------------------------------------------------------------------------------

//JavaScript Const
//The const keyword was introduced in ES6 (2015).
//Variables defined with const cannot be Redeclared.
//Variables defined with const cannot be Reassigned.
//Variables defined with const have Block Scope.

//Must be Assigned
//JavaScript const variables must be assigned a value when they are declared:
//correct:
const PI = 3.14159265359;
//incorrect:
const PI;
PI = 3.14159265359;

//When to use JavaScript const?
//Always declare a variable with const when you know that the value should not be changed.
//Use const when you declare:
//A new Array
//A new Object
//A new Function
//A new RegExp

//Constant Objects and Arrays
//The keyword const is a little misleading(گمراه کننده)
//It does not define a constant value. It defines a constant reference to a value.
//Because of this you can NOT:
//Reassign a constant value
//Reassign a constant array
//Reassign a constant object
//But you CAN:
//Change the elements of constant array
//Change the properties of constant object

//Constant Arrays
//You can change the elements of a constant array:
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];
// You can change an element:
cars[0] = "Toyota";
// You can add an element:
cars.push("Audi");
----------
//But you can NOT reassign the array:
const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"];    // ERROR

//Constant Objects
//You can change the properties of a constant object:
// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};
// You can change a property:
car.color = "red";
// You can add a property:
car.owner = "Johnson";
-------------
//But you can NOT reassign the object:
const car = {type:"Fiat", model:"500", color:"white"};
car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR

//Block Scope
//Declaring a variable with const is similar to let when it comes to Block Scope.
const x = 10;
// Here x is 10
{
const x = 2;
// Here x is 2
}
// Here x is 10
-----------------------------------------------------------------------------------

//JavaScript Assignment
//The &&= Operator
//If the first value is false, the second value is assigned:
let x = 100;
x &&= 5;
//result x=5
-----
let x ;
x &&= 5;
//result x=undefined

//The ||= Operator
//If the first value is false, the second value is assigned:
let x ;
x ||= 5;
//result x=5
------
let x=100 ;
x ||= 5;
//result x=100

//The ??= Operator
//Nullish coalescing(اادغام) assignment
//If the first value is undefined or null, the second value is assigned.
let x;
x ??= 5;
//result x=5
-------
let x=1;
x ??= 5;
//result x=1
----------------------------------------------------------------------------------------------

//JavaScript Data Types
//JavaScript has 8 Datatypes
//1. String
//2. Number
//3. Bigint
//4. Boolean
//5. Undefined
//6. Null
//7. Symbol
//8. Object

//The Object Datatype
//The object data type can contain:
//1. An object
//2. An array
//3. A date

// Numbers:
let length = 16;
let weight = 7.5;
// Strings:
let color = "Yellow";
let lastName = "Johnson";
// Booleans
let x = true;
let y = false;
// Object:
const person = {firstName:"John", lastName:"Doe"};
// Array object:
const cars = ["Saab", "Volvo", "BMW"];
// Date object:
const date = new Date("2022-03-25");

//JavaScript Types are Dynamic
//JavaScript has dynamic types. This means that the same variable can be used to hold different data types:
let x;       // Now x is undefined
x = 5;       // Now x is a Number
x = "John";  // Now x is a String

//Exponential Notation (نشانه گذاری نمایی)
//Extra large or extra small numbers can be written with scientific (exponential) notation:
let y = 123e5;    // 12300000
let z = 123e-5;   // 0.00123

//JavaScript BigInt
//All JavaScript numbers are stored in a a 64-bit floating-point format.
//JavaScript BigInt is a new datatype (2020) that can be used to store integer values that are too big
//to be represented by a normal JavaScript Number.
let x = BigInt("123456789012345678901234567890");

//JavaScript Arrays
const cars = ["Saab", "Volvo", "BMW"];

//JavaScript Objects
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

//The typeof Operator
//The typeof operator returns the type of a variable or an expression:
typeof ""             // Returns "string"
typeof "John"         // Returns "string"
typeof "John Doe"     // Returns "string"
----------------------------------------------------------------------------------------------------

//JavaScript Functions
//A JavaScript function is a block of code designed to perform a particular task.
function myFunction(p1, p2) {
  return p1 * p2;
}

//The () Operator Invokes the Function
//Accessing a function without () will return the function definition instead of the function result:
function toCelsius(f) {
  return (5/9) * (f-32);
}
toCelsius; 
//result is: function toCelsius(f) { return (5/9) * (f-32); }
------------------------------------------------------------------------------------------------------

//JavaScript Objects
const car = {type:"Fiat", model:"500", color:"white"};

//Accessing Object Properties
//You can access object properties in two ways:
//1- objectName.propertyName
person.lastName;
//2- objectName["propertyName"]
person["lastName"];

//Object Methods
const person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

//What is this?
//this is not a variable. It is a keyword. You cannot change the value of this.
//The this keyword refers to different objects depending on how it is used:
//In an object method, this refers to the object.
//Alone, this refers to the global object.
//In a function, this refers to the global object.
//In a function, in strict mode, this is undefined.
//In an event, this refers to the element that received the event.
//Methods like call(), apply(), and bind() can refer this to any object.

//Accessing Object Methods
//You access an object method with the following syntax:
//objectName.methodName()
name = person.fullName();
//If you access a method without the () parentheses, it will return the function definition:

//Do Not Declare Strings, Numbers, and Booleans as Objects!
//When a JavaScript variable is declared with the keyword "new", the variable is created as an object:
x = new String();        // Declares x as a String object
y = new Number();        // Declares y as a Number object
z = new Boolean();       // Declares z as a Boolean object
//Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
--------------------------------------------------------------------------------------------------------------------

//JavaScript Events
//HTML events are "things" that happen to HTML elements
//An HTML event can be something the browser does, or something a user does.
//When JavaScript is used in HTML pages, JavaScript can "react" on these events.
//Here are some examples of HTML events:
//An HTML web page has finished loading
//An HTML input field was changed
//An HTML button was clicked
//JavaScript lets you execute code when events are detected.
//HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.
<element event='some JavaScript'>
//or
<element event="some JavaScript">
//example
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

//Common HTML Events
//onchange
//onclick
//onmouseover
//onmouseout
//onkeydown
//onload

//JavaScript Event Handlers
//Event handlers can be used to handle and verify user input, user actions, and browser actions:
-------------------------------------------------------------------------------------------------------

//JavaScript Strings
//String Length
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;

//Escape Character
//Because strings must be written within quotes, JavaScript will misunderstand this string:
let text = "We are the so-called "Vikings" from the north.";
//The solution to avoid this problem, is to use the backslash escape character.
//The backslash (\) escape character turns special characters into string characters:
Code	Result	Description
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash
//example
let text = "We are the so-called \"Vikings\" from the north.";

//Breaking Long Code Lines
//A safer way to break up a string, is to use string addition:
document.getElementById("demo").innerHTML = "Hello " +
"Dolly!";

//JavaScript Strings as Objects
//Normally, JavaScript strings are primitive values, created from literals:
let x = "John";
//But strings can also be defined as objects with the keyword new:
let y = new String("John");
//Do not create Strings objects.
//The new keyword complicates the code and slows down execution speed.
//String objects can produce unexpected results:
//JavaScript objects cannot be compared
//(x == y) is false
//(x === y) is false 
---------------------------------------------------------------------------------------------------------------

//JavaScript String Methods
//String length
//returns the length of a string:
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;

//String slice()
//Slice out a portion of a string
let text = "Apple, Banana, Kiwi";
let part = text.slice(7, 13);
let part2 = text.slice(7);
//If a parameter is negative, the position is counted from the end of the string:
let part = text.slice(-7);

//String substring()
//substring() is similar to slice().
//The difference is that start and end values less than 0 are treated as 0 in substring()
let str = "Apple, Banana, Kiwi";
let part = str.substring(7, 13);

//String substr()
//substr() is similar to slice().
//The difference is that the second parameter specifies the length of the extracted part.
let str = "Apple, Banana, Kiwi";
let part = str.substr(7, 6);

//String replace()
//The replace() method replaces a specified value with another value in a string:
let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");
//The replace() method does not change the string it is called on.
//The replace() method returns a new string.
//The replace() method replaces only the first match
//If you want to replace all matches, use a regular expression with the /g flag set. See examples below.
//By default, the replace() method replaces only the first match:
//By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:
//To replace case insensitive, use a regular expression with an /i flag (insensitive):
let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");
//to replace all matches, use a regular expression with a /g flag (global match):
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");

//String replaceAll()
//In 2021, JavaScript introduced the string method replaceAll():
text = text.replaceAll("Cats","Dogs");
//The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.
//If the parameter is a regular expression, the global flag (g) must be set set, otherwise a TypeError is thrown.
text = text.replaceAll(/Cats/g,"Dogs");
//replaceAll() does not work in Internet Explorer.

//String toUpperCase()
let text1 = "Hello World!";
let text2 = text1.toUpperCase();

//String toLowerCase()
let text1 = "Hello World!";       
let text2 = text1.toLowerCase();

//String concat()
//concat() joins two or more strings:
let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);

//All string methods return a new string. They don't modify the original string.
//Formally said:
//Strings are immutable: Strings cannot be changed, only replaced.

//String trim()
//The trim() method removes whitespace from both sides of a string:
let text1 = "      Hello World!      ";
let text2 = text1.trim();

//String trimStart()
//ECMAScript 2019 added the String method trimStart() to JavaScript.
//The trimStart() method works like trim(), but removes whitespace only from the start of a string.
let text1 = "     Hello World!     ";
let text2 = text1.trimStart();

//String trimEnd()
//ECMAScript 2019 added the String method trimEnd() to JavaScript.
//The trimEnd() method works like trim(), but removes whitespace only from the end of a string.
let text1 = "     Hello World!     ";
let text2 = text1.trimEnd();

//String padStart()
//The padStart() method pads(میپوشاند - لایه میگذارد) a string with another string:
let text = "5";
let padded = text.padStart(4,"x");  //return: xxxx5
//The padStart() method is a string method.
//To pad a number, convert the number to a string first.
let numb = 5;
let text = numb.toString();
let padded = text.padStart(4,"0");

//String padEnd()
//is like padStart but pad form end
et text = "5";
let padded = text.padStart(4,"x");  //return: 5xxxx

//Extracting String Characters
//There are 3 methods for extracting string characters:
//1. charAt(position)
//2. charCodeAt(position)
//3. Property access [ ]

//String charAt()
//The charAt() method returns the character at a specified index (position) in a string:
let text = "HELLO WORLD";
let char = text.charAt(0);

//String charCodeAt()
//The charCodeAt() method returns the unicode of the character at a specified index in a string:
//The method returns a UTF-16 code (an integer between 0 and 65535). //عدد برمیگرداند
let text = "HELLO WORLD";
let char = text.charCodeAt(0);

//Property Access
//ECMAScript 5 (2009) allows property access [ ] on strings:
let text = "HELLO WORLD";
let char = text[0];
//Property access might be a little unpredictable:
//It makes strings look like arrays (but they are not)
//If no character is found, [ ] returns undefined, while charAt() returns an empty string.
//It is read only. str[0] = "A" gives no error (but does not work!)

//String split()
//A string can be converted to an array with the split() method:
text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe
let text = "a,b,c,d,e,f";
const myArray = text.split(",");
//If the separator is omitted, the returned array will contain the whole string in index [0].
//If the separator is "", the returned array will be an array of single characters:
---------------------------------------------------------------------------------------------------------------------------

//JavaScript String Search
//JavaScript Search Methods
//String indexOf()
//The indexOf() method returns the index of (position of) the first occurrence(اتفاق) of a string in a string:
let str = "Please locate where 'locate' occurs!";
str.indexOf("locate");  //return 7

//String lastIndexOf()
//The lastIndexOf() method returns the index of the last occurrence of a specified text in a string
let text = "Please locate where 'locate' occurs!";
text.lastIndexOf("locate");  //return 21
//Both indexOf(), and lastIndexOf() return -1 if the text is not found
//Both methods accept a second parameter as the starting position for the search:
let text = "Please locate where 'locate' occurs!";
text.indexOf("locate", 15);

//String search()
//The search() method searches a string for a string (or a regular expression) and returns the position
//of the match:
let str = "Please locate where 'locate' occurs!";
str.search("locate");
//The two methods, indexOf() and search(), are equal? NO
//The search() method cannot take a second start position argument.
//The indexOf() method cannot take powerful search values (regular expressions).

//String match()
//The match() method returns an array containing the results of matching a string against
//a string (or a regular expression).
let text = "The rain in SPAIN stays mainly in the plain";
const myArr = text.match("ain");
document.getElementById("demo").innerHTML = myArr.length + " " + myArr;  //return 1 ain
---
//with regular expression
let text = "The rain in SPAIN stays mainly in the plain"; 
const myArr = text.match(/ain/);
document.getElementById("demo").innerHTML = myArr.length + " " + myArr;   //return 1 ain
---
//with regular expression global
let text = "The rain in SPAIN stays mainly in the plain"; 
const myArr = text.match(/ain/g);
document.getElementById("demo").innerHTML = myArr.length + " " + myArr;   //return 3 ain,ain,ain
--
global search insensitive
const myArr = text.match(/ain/gi);

//String matchAll()
//The matchAll() method returns an iterator(اشاره گر) containing the results of matching a string
//against a string (or a regular expression).
let text = "I love cats. Cats are very easy to love. Cats are very popular."
const iterator = text.matchAll("Cats");
document.getElementById("demo").innerHTML = Array.from(iterator);
//If you want to search case insensitive, the insensitive flag (i) must be set:
const iterator = text.matchAll(/Cats/gi);

//String includes()
//The includes() method returns true if a string contains a specified value.
//Otherwise it returns false.
let text = "Hello world, welcome to the universe.";
text.includes("world");  //true
//Check if a string includes "world". Start at position 12:
let text = "Hello world, welcome to the universe.";
text.includes("world", 12);

//String startsWith()
//The startsWith() method returns true if a string begins with a specified value.
//Otherwise it returns false:
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello"); //return true
//A start position for the search can be specified:
let text = "Hello world, welcome to the universe.";
text.startsWith("world", 5)

//String endsWith()
//The endsWith() method returns true if a string ends with a specified value.
//Otherwise it returns false
let text = "John Doe";
text.endsWith("Doe"); //return true
//Check if the 11 first characters of a string ends with "world":
let text = "Hello world, welcome to the universe.";
text.endsWith("world", 11);
----------------------------------------------------------------------------------------------------------------------------

//JavaScript Template Literals
//Synonyms:
//-Template Literals (الفاظ قالبی)
//-Template Strings
//-String Templates
//-Back-Tics Syntax

//Back-Tics Syntax
//Template Literals use back-ticks (``) rather than the quotes ("") to define a string:
let text = `Hello World!`;

//Quotes Inside Strings
//With template literals, you can use both single and double quotes inside a string:
let text = `He's often called "Johnny"`;

//Multiline Strings
//Template literals allows multiline strings:
let text =
`The quick
brown fox
jumps over
the lazy dog`;

//Interpolation(درون یابی)
//Template literals provide an easy way to interpolate variables and expressions into strings.
//The method is called string interpolation.
//The syntax is:
${...} //توضیح در ادامه

//Variable Substitutions (جایگزینی)
//Template literals allow variables in strings:
let firstName = "John";
let lastName = "Doe";
let text = `Welcome ${firstName}, ${lastName}!`;
//Automatic replacing of variables with real values is called string interpolation.

//Expression Substitution
//Template literals allow expressions in strings:
let price = 10;
let VAT = 0.25;
let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

//HTML Templates
let header = "Templates Literals";
let tags = ["template literals", "javascript", "es6"];
let html = `<h2>${header}</h2><ul>`;
for (const x of tags) {
  html += `<li>${x}</li>`;
}
html += `</ul>`;

//Template Literals is an ES6 feature (JavaScript 2015).
----------------------------------------------------------------------------------------------------------------------------

//JavaScript Numbers
//JavaScript has only one type of number. Numbers can be written with or without decimals(اعشار).
let x = 3.14;    // A number with decimals
let y = 3;       // A number without decimals

//Extra large or extra small numbers can be written with scientific (exponent (توان)) notation(نششانه گذاری):
let x = 123e5;    // 12300000
let y = 123e-5;   // 0.00123

//Numeric Strings
//JavaScript strings can have numeric content:
//JavaScript will try to convert strings to numbers in all numeric operations:
//This will work:
let x = "100";
let y = "10";
let z = x / y;
//But this will not work: this is concatanated
let x = "100";
let y = "10";
let z = x + y;   //result is "10010"

//NaN - Not a Number
//NaN is a JavaScript reserved word indicating that a number is not a legal number.
//Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):
let x = 100 / "Apple";
//You can use the global JavaScript function isNaN() to find out if a value is a not a number:
let x = 100 / "Apple";
let y = isNaN(x);
//If you use NaN in a mathematical operation, the result will also be NaN:
let x = NaN;
let y = 5;
let z = x + y;  //result is NaN
//Or the result might be a concatenation like NaN5:
let x = NaN;
let y = "5";
let z = x + y;   //result is NaN5
//NaN is a number: typeof NaN returns number:
typeof NaN;

//Infinity(بینهایت)
//Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
let myNumber = 2;
// Execute until Infinity
while (myNumber != Infinity) {
  myNumber = myNumber * myNumber;
}
//Division by 0 (zero) also generates Infinity:
let x =  2 / 0;
let y = -2 / 0;
//Infinity is a number: typeof Infinity returns number.
typeof Infinity;

//Hexadecimal (مبنای 16)
//JavaScript interprets numeric constants as hexadecimal if they are preceded(پیشوند) by 0x.
let x = 0xF1; 
document.getElementById("demo1").innerHTML = x; // result is 241
//Never write a number with a leading zero (like 07).
//Some JavaScript versions interpret numbers as octal(مبنای هشت) if they are written with a leading zero.
//By default, JavaScript displays numbers as base 10 decimals.
//But you can use the toString() method to output numbers from base 2 to base 36.
//Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.
let myNumber = 32;
myNumber.toString(32);
myNumber.toString(16);
myNumber.toString(12);
myNumber.toString(10);
myNumber.toString(8);
myNumber.toString(2);
-----------------------------------------------------------------------------------------------------------------------------

//JavaScript BigInt
//JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number.
//o create a BigInt, append n to the end of an integer or call BigInt():
let x = 9999999999999999;
let x = 1234567890123456789012345n;
let y = BigInt(1234567890123456789012345)

//The JavaScript typeof a BigInt is "bigint":

//BigInt is the second numeric data type in JavaScript (after Number).
//With BigInt the total number of supported data types in JavaScript is 8:
//1. String
//2. Number
//3. Bigint
//4. Boolean
//5. Undefined
//6. Null
//7. Symbol
//8. Object

//Arithmetic between a BigInt and a Number is not allowed (type conversion lose information).
//A BigInt can not have decimals.
let x = 5n;
let y = x / 2;  // Error: Cannot mix BigInt and other types, use explicit conversion.
-----
let x = 5n;
let y = Number(x) / 2;   //this is work

//9007199254740992 === 9007199254740993; // is true !!!
//Minimum and Maximum Safe Integers
//ES6 added max and min properties to the Number object:
//MAX_SAFE_INTEGER
//MIN_SAFE_INTEGER
let x = Number.MAX_SAFE_INTEGER;

//The Number.isInteger() Method
//The Number.isInteger() method returns true if the argument is an integer.
//Number.isInteger(10);  //return true
Number.isInteger(10.5);  //return false

//The Number.isSafeInteger() Method
//A safe integer is an integer that can be exactly represented as a double precision number (عدد صحیح دابل).
//The Number.isSafeInteger() method returns true if the argument is a safe integer.
Number.isSafeInteger(10); //return true
Number.isInteger(10.5);  //return false
Number.isSafeInteger(12345678901234567890);  //return false

//Safe integers are all integers from -(253 - 1) to +(253 - 1).
//This is safe: 9007199254740991. This is not safe: 9007199254740992.

-----------------------------------------------------------------------------------------------------------------------------

//JavaScript Number Methods
//Method	Description
//toString()	Returns a number as a string
//toExponential()	Returns a number written in exponential notation
//toFixed()	Returns a number written with a number of decimals
//toPrecision()	Returns a number written with a specified length
//ValueOf()	Returns a number as a number

//The toString() Method
//The toString() method returns a number as a string.
//All number methods can be used on any type of numbers (literals, variables, or expressions):
let x = 123;
x.toString();
(123).toString();
(100 + 23).toString();

//The toExponential() Method
//toExponential() returns a string, with a number rounded and written using exponential notation.
//A parameter defines the number of characters behind the decimal point:
let x = 986475.656;
x.toExponential(2);  //return 9.86e+5
x.toExponential(4);  //return 9.8648e+5
x.toExponential(6);  //return 9.864757e+5
//The parameter is optional. If you don't specify it, JavaScript will not round the number.
x.toExponential();  //return 9.86475656e+5

//The toFixed() Method
//toFixed() returns a string, with the number written with a specified number of decimals:
let x = 9.656;
x.toFixed(0);  //return 9
x.toFixed(2); //return 9.65
x.toFixed(4);  //return 9.6560
x.toFixed(6);

-----------------------------------------------------------------------------------------------------------------------------
escape----------------------------
------------------------------------------------------------------------------------------------------------------------------

//JavaScript Arrays
//An array is a special variable, which can hold more than one value:
const cars = ["Saab", "Volvo", "BMW"];

//It is a common practice to declare arrays with the const keyword.

//You can also create an array, and then provide the elements:
const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";

//Using the JavaScript Keyword new
const cars = new Array("Saab", "Volvo", "BMW");
//The two examples above do exactly the same.
//There is no need to use new Array().
//For simplicity, readability and execution speed, use the array literal method.

//Changing an Array Element
cars[0] = "Opel";

//Access the Full Array
//With JavaScript, the full array can be accessed by referring to the array name:
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;

//Arrays are Objects
//Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.

//Arrays use numbers to access its "elements"
cars[0];

//Array Elements Can Be Objects
//JavaScript variables can be objects. Arrays are special kinds of objects.
//Because of this, you can have variables of different types in the same Array.
//You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:
myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;

//Array Properties and Methods
cars.length   // Returns the number of elements
cars.sort()   // Sorts the array

//Accessing the First Array Element
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[0];

//Accessing the Last Array Element
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[fruits.length - 1];

//Looping Array Elements
//One way to loop through an array, is using a for loop:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;

let text = "<ul>";
for (let i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";

//You can also use the Array.forEach() function:
const fruits = ["Banana", "Orange", "Apple", "Mango"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value) {
  text += "<li>" + value + "</li>";
}

//Adding Array Elements
//The easiest way to add a new element to an array is using the push() method:
const fruits = ["Banana", "Orange", "Apple"];
fruits.push("Lemon");  // Adds a new element (Lemon) to fruits

//New element can also be added to an array using the length property:
const fruits = ["Banana", "Orange", "Apple"];
fruits[fruits.length] = "Lemon";  // Adds "Lemon" to fruits

//WARNING !
//Adding elements with high indexes can create undefined "holes" in an array:
const fruits = ["Banana", "Orange", "Apple"];
fruits[6] = "Lemon";  // Creates undefined "holes" in fruits

//Associative Arrays
//Many programming languages support arrays with named indexes.
//Arrays with named indexes are called associative arrays (or hashes).
//JavaScript does not support arrays with named indexes.
//In JavaScript, arrays always use numbered indexes.  
const person = [];
person[0] = "John";
person[1] = "Doe";
person[2] = 46;
person.length;    // Will return 3
person[0];        // Will return "John"
//WARNING !!
//If you use named indexes, JavaScript will redefine the array to an object.
//After that, some array methods and properties will produce incorrect results.
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined

//The Difference Between Arrays and Objects
//In JavaScript, arrays use numbered indexes.  
//In JavaScript, objects use named indexes.
//Arrays are a special kind of objects, with numbered indexes.

//When to Use Arrays. When to use Objects
//JavaScript does not support associative arrays.
//You should use objects when you want the element names to be strings (text).
//You should use arrays when you want the element names to be numbers.

//How to Recognize an Array
//The problem is that the JavaScript operator typeof returns "object":
const fruits = ["Banana", "Orange", "Apple"];
let type = typeof fruits;   //return object
//Solution 1:
Array.isArray(fruits);  //return true
//Solution 2:
const fruits = ["Banana", "Orange", "Apple"];
fruits instanceof Array;  //return true
--------------------------------------------------------------------------------------------------------------------

//JavaScript Array Methods
//Converting Arrays to Strings
//The JavaScript method toString() converts an array to a string of (comma separated) array values.
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

//The join() method also joins all array elements into a string.
//It behaves just like toString(), but in addition you can specify the separator:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");
//return Banana * Orange * Apple * Mango

//JavaScript Array pop()
//The pop() method removes the last element from an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();
//The pop() method returns the value that was "popped out":
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.pop();

//JavaScript Array push()
//The push() method adds a new element to an array (at the end):
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");
//The push() method returns the new array length:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.push("Kiwi");

//Shifting Elements
//Shifting is equivalent to popping, but working on the first element instead of the last.
//The shift() method removes the first array element and "shifts" all other elements to a lower index.
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();
//The shift() method returns the value that was "shifted out":
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.shift();

//JavaScript Array unshift()
//The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");
//The unshift() method returns the new array length:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.unshift("Lemon");

//Changing Elements
fruits[0] = "Kiwi";

//JavaScript Array delete()
delete fruits[0];
//Warning !
//Array elements can be deleted using the JavaScript operator delete.
//Using delete leaves undefined holes in the array.
//Use pop() or shift() instead.

//Merging (Concatenating) Arrays
//The concat() method creates a new array by merging (concatenating) existing arrays:
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];
const myChildren = myGirls.concat(myBoys);
//The concat() method does not change the existing arrays. It always returns a new array.
//The concat() method can take any number of array arguments:
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);
//The concat() method can also take strings as arguments:
const arr1 = ["Emil", "Tobias", "Linus"];
const myChildren = arr1.concat("Peter"); 

//JavaScript Array splice()(اتصال)
//The splice() method can be used to add new items to an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
//The first parameter (2) defines the position where new elements should be added (spliced in).
//The second parameter (0) defines how many elements should be removed.
//The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
//The splice() method returns an array with the deleted items:
//Using splice() to Remove Elements
//With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);

//JavaScript Array slice()
//The slice() method slices out a piece of an array into a new array.
//This example slices out a part of an array starting from array element 1 ("Orange"):
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);
//The slice() method creates a new array.
//The slice() method does not remove any elements from the source array.
//The slice() method can take two arguments like slice(1, 3).
//The method then selects elements from the start argument, and up to (but not including) the end argument.
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);

//Automatic toString()
//JavaScript automatically converts an array to a comma separated string when a primitive value is expected.
//This is always the case when you try to output an array.
//These two examples will produce the same result:
//1
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
//2
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;
//All JavaScript objects have a toString() method.
--------------------------------------------------------------------------------------------------------------------------------

//JavaScript Sorting Arrays
//The sort() method sorts an array alphabetically:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();

//Reversing an Array
//The reverse() method reverses the elements in an array.
//You can use it to sort an array in descending order:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
fruits.reverse();

//Numeric Sort
//By default, the sort() function sorts values as strings.
//This works well for strings ("Apple" comes before "Banana").
//However, if numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".
//Because of this, the sort() method will produce incorrect result when sorting numbers.
//You can fix this by providing a compare function:
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});  //صعودی
points.sort(function(a, b){return b-a});  //نزولی

//The Compare Function
//The purpose of the compare function is to define an alternative sort order.
//The compare function should return a negative, zero, or positive value, depending on the arguments:
function(a, b){return a - b}
//When the sort() function compares two values, it sends the values to the compare function, and sorts the //values according to the returned (negative, zero, positive) value.
//If the result is negative, a is sorted before b.
//If the result is positive, b is sorted before a.
//If the result is 0, no changes are done with the sort order of the two values.
//The compare function compares all the values in the array, two values at a time (a, b)

//Sorting an Array in Random Order
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(){return 0.5 - Math.random()});

//Find the Highest (or Lowest) Array Value
//There are no built-in functions for finding the max or min value in an array.
//However, after you have sorted an array, you can use the index to obtain the highest and lowest values.
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
// now points[0] contains the lowest value
// and points[points.length-1] contains the highest value

//Using Math.max() on an Array
//ou can use Math.max.apply to find the highest number in an array:
const points = [40, 100, 1, 5, 25, 10];
const x = Math.max.apply(points);

//Using Math.min() on an Array
//You can use Math.min.apply to find the lowest number in an array:
const points = [40, 100, 1, 5, 25, 10];
const x = Math.min.apply(points);

//My Min / Max JavaScript Methods
//This function loops through an array comparing each value with the highest value found:
function myArrayMax(arr) {
  let len = arr.length;
  let max = -Infinity;
  while (len--) {
    if (arr[len] > max) {
      max = arr[len];
    }
  }
  return max;
}
--------
//This function loops through an array comparing each value with the lowest value found:
function myArrayMin(arr) {
  let len = arr.length;
  let min = Infinity;
  while (len--) {
    if (arr[len] < min) {
      min = arr[len];
    }
  }
  return min;
}

//Sorting Object Arrays
//Even if objects have properties of different data types, the sort() method can be used to sort the array.
//The solution is to write a compare function to compare the property values:
const cars = [
  {type:"Volvo", year:2016},
  {type:"Saab", year:2001},
  {type:"BMW", year:2010}
];
cars.sort(function(a, b){return a.year - b.year});
//Comparing string properties is a little more complex:
cars.sort(function(a, b){
  let x = a.type.toLowerCase();
  let y = b.type.toLowerCase();
  if (x < y) {return -1;}
  if (x > y) {return 1;}
  return 0;
});
------------------------------------------------------------------------------------------------------------------

//JavaScript Array Iteration(تکرار)
//JavaScript Array forEach()
//The forEach() method calls a function (a callback function) once for each array element.
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);
function myFunction(value, index, array) {
  txt += value + "<br>";
}
//Note that the function takes 3 arguments:
//The item value
//The item index
//The array itself

//JavaScript Array map()
//The map() method creates a new array by performing a function on each array element.
//The map() method does not execute the function for array elements without values.
//The map() method does not change the original array.
//This example multiplies each array value by 2:
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);
function myFunction(value, index, array) {
  return value * 2;
}
//When a callback function uses only the value parameter, the index and array parameters can be omitted:
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);
function myFunction(value) {
  return value * 2;
}

//JavaScript Array filter()
//The filter() method creates a new array with array elements that pass a test.
//This example creates a new array from elements with a value larger than 18:
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//JavaScript Array reduce()
//The reduce() method runs a function on each array element to produce (reduce it to) a single value.
//The reduce() method works from left-to-right in the array.
//This example finds the sum of all numbers in an array:
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
}
//Note that the function takes 4 arguments:
//The total (the initial value / previously returned value)
//The item value
//The item index
//The array itself
//The reduce() method can accept an initial value:
onst numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 100);
function myFunction(total, value) {
  return total + value;
}

//JavaScript Array reduceRight()
//The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.
//The reduceRight() works from right-to-left in the array
//The reduceRight() method does not reduce the original array
//This example finds the sum of all numbers in an array:
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
}
/Note that the function takes 4 arguments:
//The total (the initial value / previously returned value)
//The item value
//The item index
//The array itself

//JavaScript Array every()
//The every() method checks if all array values pass a test.
//This example checks if all array values are larger than 18:
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//Note that the function takes 3 arguments:
//The item value
//The item index
//The array itself

//JavaScript Array some()
//The some() method checks if some array values pass a test.
//This example checks if some array values are larger than 18:
const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//Note that the function takes 3 arguments:
//The item value
//The item index
//The array itself

//JavaScript Array indexOf()
//The indexOf() method searches an array for an element value and returns its position.
//Note: The first item has position 0, the second item has position 1, and so on.
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.indexOf("Apple") + 1;
//Syntax
//array.indexOf(item, start)
//tem	Required. The item to search for.
//start	Optional. Where to start the search. Negative values will start at the given position counting from //the end, and search to the end.
//Array.indexOf() returns -1 if the item is not found.

//JavaScript Array lastIndexOf()
//Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence(اتفاق)
//of the specified element.
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.lastIndexOf("Apple") + 1;
//Syntax
//array.lastIndexOf(item, start)
//item	Required. The item to search for
//start	Optional. Where to start the search. Negative values will start at the given position counting
//from the end, and search to the beginning

//JavaScript Array find()
//The find() method returns the value of the first array element that passes a test function.
//This example finds (returns the value of) the first element that is larger than 18:
const numbers = [4, 9, 16, 25, 29];
let first = numbers.find(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//Note that the function takes 3 arguments:
//The item value
//The item index
//The array itself

//JavaScript Array findIndex()
//The findIndex() method returns the index of the first array element that passes a test function.
//This example finds the index of the first element that is larger than 18:
const numbers = [4, 9, 16, 25, 29];
let first = numbers.findIndex(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//Note that the function takes 3 arguments:
//The item value
//The item index
//The array itself

//JavaScript Array.from()
//The Array.from() method returns an Array object from any object with a length property or
//any iterable object.
Array.from("ABCDEFG");

//JavaScript Array Keys()
//The Array.keys() method returns an Array Iterator object with the keys of an array.
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();
for (let x of keys) {
  text += x + "<br>";
}

//Array entries()
//The entries() method returns an Array Iterator object with key/value pairs:
//Example
//Create an Array Iterator, and then iterate over the key/value pairs:
//const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();
for (let x of f) {
  document.getElementById("demo").innerHTML += x;
}
//return
//0,Banana
//1,Orange
//2,Apple
//3,Mango

//JavaScript Array includes()
//ECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element
//is present in an array (including NaN, unlike indexOf).
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango"); // is true
--------------------------------------------------------------------------------------------------------------

//JavaScript Date Objects
...








