ساختارها


چه موقع از ساختار بجای کلاس استفاده کنیم؟
The general rule to follow is that structs should be small, simple (one-level) collections of related properties, that are immutable once created; for anything else, use a class.


-----------------------------------------------------------------
پیشنهاد میشود  struct readonly باشد چرا؟
چون اگر یک فیلدی از نوع کلاس داشته باشو و ن.منه ای از ساختارمان را به متدی پاس بدهیم و انتظار نداریم آن متد نمونه اولیه ساختارمان را بتواند
تغییر دهد ولی چون یک فیلد آن از نوع کلاس است آن فیلد میتواند تغییر کند بنابراین گیج کننده میشود و ممکن است خطاهایی در منطق برنامه یمان ایجاد کنیم


------------------------------------------------

سی شارپ دارای نوعی از value type است که ساختار (struct) نامیده می شود. یک ساختار (struct) می تواند با استفاده از کلمه رزرو شده struct تعریف شود.

یک ساختار یک value type بوده و بنابراین سریع تر از یک کلاس است. 

 از ساختارها در مواردی که می خواهید تنها یک داده را ذخیره کنید استفاده کنید.

ویژگی های یک ساختار(struct)
ساختار ها می توانند شامل سازنده ها ، ثابت ها ، فیلد ها ،متدها ، صفات ، شاخص ها ، عملگرها ، رویدادها و انواع تودرتو باشند.
یک ساختار نمی تواند شامل یک سازنده و یا مخرب پیش فرض باشد. 
ساختارها می‌توانند اینترفیس ها را پیاده سازی کنند. 
ساختار ها نمی‌توانند از یک کلاس یا ساختاری دیگر ارث بری کنند.
اعضای یک ساختار نمی توانند abstract ، virtual و یا protected باشند. 
به منظور استفاده از اعضای یک ساختار از جمله صفات ، متد ها و رویدادها باید آن ساختار با کلمه رزرو شده new مقدار دهی اولیه شود.

تفاوت بین ساختار و کلاس
کلاس یک reference type است در حالی که ساختار یک value type است.
ساختار نمی تواند دارای سازنده و مخرب پیش‌فرض باشد با این حال ساختارها می توانند دارای سازنده‌های پارامتر دار باشند.
ساختار را می‌توان بدون استفاده از کلمه new نمونه‌سازی کرد. با این حال در این صورت نمی‌توان از اعضای آن استفاده کرد.

یک ساختار یک value type بوده  ذخیره اطلاعات به شکل مقداری فاقدسربارحافظه هستند و بنابراین سریع تر از یک کلاس است. عموماً ساختار ها برای برنامه نویسی بازی ها مناسب هستند. با این حال انتقال یک کلاس ، ساده تر از انتقال یک ساختار است. بنابراین در مواردی که نیاز به انتقال داده بین کلاس ها را دارید از ساختار ها استفاده نکنید.

---------------------------------------
struct Point
{
    private int _x, _y;

    public int x, y;

    public static int X, Y;

    public int XPoint {
        get 
        {
              return _x;
        }

        set 
        {
            _x = value;
            PointChanged(_x);
        }
    }

    public int YPoint
    {
        get
        {
            return _y;
        }
        set
        {
            _y = value;
            PointChanged(_y);
        }
    }

    public event Action<int> PointChanged;

    public void PrintPoints()
    {
        Console.WriteLine(" x: {0}, y: {1}", _x, _y);
    }

    public static void StaticMethod()
    {
        Console.WriteLine("Inside Static method");
    }
}
-------------------------------------

class Program
{
    static void StructEventHandler(int point)
    {
        Console.WriteLine("Point changed to {0}", point);
    }

    static void Main(string[] args)
    {
        Point.StaticMethod();

        Point p = new Point();
        
        p.PointChanged += StructEventHandler;
        p.XPoint = 123;
        
        p.PrintPoints();
    }
}









