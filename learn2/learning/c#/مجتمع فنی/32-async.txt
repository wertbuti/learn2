thread
Thread کوچک‌ترین واحد اجرایی در سیستم عامل است.Thread (نخ | رشته) توالی محدودی از دستورالعمل‌های برنامه نویسی به حساب می‌آید.
Task چیست؟
وظیفه یا Task در واقع پوششی است که برای کار با تابع‌های ناهمگام مورد استفاده قرار می‌گیرد. آن‌ها در واقع نماینده مقداری هستند که در آینده بازگشت خواهد یافت.
async
برنامه نویسی ناهمگام میزان واکنش گرایی و سرعت نرم افزار های خود را به میزان قابل توجهی افزایش دهید.
اگر می‌خواهید در زبان #C یک درخواست وب ارسال کنید و یا هر کار دیگری در پس‌زمینه انجام دهید باید از «وظایف پس‌زمینه ناهمگام» (asynchronous background tasks) استفاده کنید تا نخ اصلی برنامه مسدود نشود.
async Task<int> AccessTheWebAsync()
{
    HttpClient client = new HttpClient();
    Task<string> getStringTask = client.GetStringAsync("https://sourcesara.com ");
    DoIndependentWork();
    string urlContents = await getStringTask;
    return urlContents.Length;
}
کلمه کلیدی async قبل از نوع بازگشتی متد.
نوع بازگشتی از نوع Task که در اینجا به صورت Task<int> می باشد زیرا خروجی متد یک عدد صحیح است.
نام متد که با کلمه Async خاتمه یافته است.
عملگر await اجرای متد AccessTheWebAsync() را معلق می کند و این متد تا زمانی که getStringTask کامل نشده باشد، متوقف می ماند. در همین حال کنترل اجرای برنامه به متدی که AccessTheWebAsync() را فراخوانی کرده است باز می گردد. عملگر await نتیجه Task را از متغیر getStringTask بیرون می کشد و زمانی که عملیات getStringTask کامل شود، کنترل اجرای برنامه به این قسمت باز می گردد تا اجرای برنامه ادامه می یابد.