
ASP.NET چیست
ASP.NET یک فریم ورک برای ساخت برنامه های تحت وب است که توسط مایکروسافت معرفی شد. 
این فریم ورک بر اساس CLR کار می کند. 
با استفاده از زبان های سی شارپ و یا وی بی دات نت و یا هر زبان دیگری می تواند برنامه های تحت وب خود را با استفاده از این فریم ورک ایجاد کیند. 
فریم ورک ASP.NET از دو مدل برای ساخت برنامه های تحت وب پشتیبانی می کند: Web Forms و MVC

CLR چیست
هسته ی مرکزی دات نت است. این هسته رابط بین برنامه های دات نت و سیستم عامل است. 
CLR که مخفف عبارت Common Language Runtime می باشد. هر برنامه ای که به زبان های موجود در چارچوب دات نت نوشته می شود در ابتدا کامپایلر دات نت آن را به یک زبان میانی که به آن IL مخفف Intermediate Language می گوبند تبدیل می شود که برای تمامی زبان ها و در تمامی سیستم ها مشترک می باشد و CLR آن را متوجه می شود. CLR بعد از آن می تواند توسط یک کامپایلر در لحظه یا Just in Time Compiler این کد ها را با توجه سیستم عامل مورد استفاده ترجمه و آماده اجرا می کند.CLR سرویسهای متعدد دیگه ای مثل مدیریت حافظه و garbage collection، مدیریت خطاها، مدیریت ثردها (Thread Management) و ... رو هم فراهم میکنه.


ASP.NET Web Forms
*- با استفاده از این فریم ورک، ساخت برنامه های تحت وب بسیار ساده تر از پیش شد. 
*- با استفاده از یک لایه abstraction برنامه نویسی وب که تحت پروتوکل HTTP که StaterLess است را به Statefull تبدیل کرد
*- در این فریم ورک مباحثی شبیه post back و ViewState معرفی شدند. 
*- در واقع مایکروسافت سعی کرد که مدل برنامه نویس ویژوال و رویدادگرا (Event Driven) را به عرصه ی وب وارد کند. این کار با معرفی مجموعه ای از کنترلهای قابل استفاده در ساخت برنامه های تحت وب انجام شد.
------------------------------------------

معایب  Web Forms
1- به دلیل گره خوردن مستقیم code behind با Event Handler ها کار Unit Testing در فریم ورک Web Forms مشکل است.
2- استفاده از ViewState هم باعث افزایش حجم صفحه ی ارسالی به مرورگر کاربر می شود هم کارایی را کاهش می کند. به علاوه، پهنای باند بیشتر مصرف می گردد.
3- قابلیت استفاده مجدد (Reusability) در Web Forms بسیار پایین است.
4- در Web Forms کنترل کمتری بر روی HTML داریم و استفاده از جاوا اسکریپت بسیار دشوار است.
5-URL هایی که در Web Forms تولید می شوند از نظر SEO ضعیف هستند. این URL ها شامل آدرس فیزیکی فایل ها به علاوه تعدادی Query String هستند که از نظر SEO ضعیف خواهند بود.
6- پشتیبانی کمتر از توسعه ی موازی پروژه: منظور از توسعه ی موازی پروژه این است که گروهی از برنامه نویسان به طور همزمان بر روی پروژه کار کنند. عده ای بر روی فایل های ASPX و تعدادی بر روی code behind پروژه کار کنند. در فریم ورک Web Forms این کار عملاً دشوار و گاهی غیر ممکن است.
-----------------------------------

الگو (Pattern): الگو یه راه حل برای حل یک مسئله ست. هر کدام از الگوهای طراحی به منظور حل کردن مشکلی معرفی شده اند.
--------------------------------

لگوهای معماری (Architectural Patterns): 
الگوهای معماری به منظور رفع کردن مشکلی در سطح معماری سیستم معرفی شده اند. با استفاده از این الگوها، ساخت کلی پروژه را تعریف می کنیم. کلاس ایجاد می کنیم، وب سرویس و کامپوننت می نویسیم.
---------------------------------

MVC
یک الگوی معماری ست که به ما این امکان را می دهد که ساختار کلی پروژه را تعریف کنیم و قسمت های مختلف آن را بسازیم.دلیل اصلی استفاده از MVC جدا سازی مسائل (Separation of Concerns) است.
----------------------------------

ساختار MVC
Model: مسئول فراهم کردن داده ها و منطق تجاری برنامه است.
Controller: کنترلر مسئول مدیریت درخواست های کاربر است. به عبارت دیگر، وظیفه ی کنترلر دریافت درخواست کاربر و پاسخ دادن به آن است. کنترلر در معماری MVC هم از View و هم از Model اطلاع دارد.
View: وظیفه ی ویو به نمایش در آوردن داده های مدل است و اغلب یک صفحه ی وب است. ویو می تواند یک صفحه ی اکسل، یک رشته ی متنی و … نیز باشد.
---------------------------------

ASP.NET MVC 
یکی دیگر از فریم ورک های مایکروسافت برای توسعه ی برنامه های تحت وب است. 
هدف از طراحی آن راحت سازی عمل Unit Testing و همچنین separation of concerns است. 
در آن خبری از سرور کنترل ها و ViewState نیست. 
این فریم ورک دقیقاً بر اساس معماری MVC طراحی شده است.
------------------------------

مزایای ASP.Net MVC
1- ایجاد ساختار یکپارچه ی پروژه. با پیاده سازی پروژه بر اساس معماری MVC دیگر نگران به هم ریختن ساختار پروژه نیستیم.
2- توسعه ی تست محور و قابلیت استفاده مجدد (Test Driven Development and Reusability): در NET MVC، کنترلر ها تنها کلاس های معمولی دات نت هستند که از کلاس پدر Controller ارث بری می کنند. به همین دلیل به راحتی می توان کنترلر را مورد Unit Testing قرار داد و بعلاوه چون به هیچ View ی مقید (Bound) نیستند، می توان از آنها به چند باره استفاده کرد. این موضوع برای ما قابلیت استفاده ی مجدد را فراهم می کند.
3- کارایی: به دلیل عدم پشتیبانی از ViewState، سایز صفحات تولید شده به شدت کمتر و در نتیجه کارایی بالاتر است.
4- کنترل کامل بر روی HTML تولید شده: به دلیل عدم استفاده ی از سرور کنترل ها، می توان بر روی HTML نهایی کنترل کامل داشت.
5- پشتیبانی از توسعه ی موازی: به دلیل جدا بودن بخش های مختلف یک پروژه ی از یکدیگر، برنامه نویس ها می توانند به صورت موازی بر روی بخش های مختلف یک پروزه کار کنند. به عنوان مثال، یک برنامه نویس بر روی مدل، دیگری بر روی ویو و نهایتاً یک برنامه نویس دیگر بر روی کنترلر کار کند.
6- SEO: با استفاده از سیستم Routing  آدرس هایی را تولید می کنیم که از نظر سئو کارایی بهتری دارند و به علاوه برای کاربر نیز خوانایی بالاتری دارند.
7- قابلیت گسترش (Extensibility): با استفاده از ASP.NET MVC می توان برای رندر کردن ویو ها از موتورهای مختلف استفاده کرد. به صورت پیش فرض دو موتور ASPX و Razor در ASP.NET MVC طراحی شده اند. اما در صورت نیاز می توان موتورهای دیگر را نیز اضافه کرد.
8- دارا بودن قابلیت های سابق ASP.NET: به دلیل اینکه ASP.NET MVC بر اساس فریم ورک ASP.NET طراحی شده است، بسیاری از ویژگی های مهم این فریم ورک را در خود دارد. مانند سیستم کش، windows authentication، session، profile state management و غیره است.
-----------------------------------------